import { Contract, TAsset, TAssetCache, TContractEarnerDef, TNewContract, TPortfolioCache } from '../models';
import { IEventPublisher } from '../services';
export declare class ContractService {
    private db;
    private logger;
    private assetRepository;
    private assetHolderRepository;
    private assetCache;
    private contractRepository;
    private portfolioCache;
    private portfolioAssetRepository;
    private portfolioService;
    private portfolioAssetService;
    private transactionService;
    private assetService;
    private makerService;
    constructor(db: FirebaseFirestore.Firestore, eventPublisher?: IEventPublisher);
    newContract(payload: TNewContract): Promise<Contract>;
    deleteContract(contractId: string): Promise<void>;
    scrubContract(contractId: string): Promise<void>;
    scrubContractAsset(assetId: string): Promise<any[]>;
    setupContractEarnerList(contractSpec: string | Contract, assetList: TContractEarnerDef[]): Promise<void>;
    newSimpleAsset(contractSpec: string | Contract, type: string, symbol: string): Promise<import("../models").Asset>;
    newAsset(contractSpec: string | Contract, assetDef: TContractEarnerDef): Promise<void>;
    fundContractAsync(contractSpec: string | Contract, units: number): Promise<any[]>;
    getContractFunds(contractSpec: string | Contract): Promise<number>;
    getAssetUnitsIssued(assetSpec: string | TAssetCache): Promise<number>;
    buyContractAsset(portfolioSpec: string | TPortfolioCache, assetSpec: string | TAssetCache, units: number, cost: number): Promise<void>;
    sellAssetToContract(portfolioSpec: string | TPortfolioCache, assetSpec: string | TAssetCache, units: number, cost: number): Promise<void>;
    mintContractAssetUnitsToPortfolio(portfolioSpec: string | TPortfolioCache, assetSpec: string | TAsset, units: number): Promise<any[]>;
    redeemPortfolioHolding(portfolioSpec: string | TPortfolioCache, assetSpec: string | TAsset, units: number): Promise<void>;
    redeemAsset(assetSpec: string): Promise<void>;
    private createContractImpl;
    private createContractPortfolioImpl;
    private sellAssetToContractImpl;
    private mintContractAssetUnitsToPortfolioImpl;
    private newAssetImpl;
    private addAssetToContract;
    private fundContractImplAsync;
}
